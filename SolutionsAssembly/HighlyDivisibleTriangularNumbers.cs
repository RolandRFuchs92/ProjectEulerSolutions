using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SolutionsAssembly
{
	public class HighlyDivisibleTriangularNumbers : ISolutionsContract
	{
		public string ProblemName => "Highly Divisible Triangular Number";
		public string ProblemDescription =>
@"The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?";
		public int ProblemNumber => 12;

		public string Solution()
		{
			return ProblemSolution(500).ToString();
		}

		private long ProblemSolution(int devisors)
		{
			long inc = 1;
			long count = 0;
			long triangleNum = 0;
			while (count < devisors)
			{
				triangleNum = NthTriangularNumber(inc);
				count = countDevisors(triangleNum, devisors);

				inc++;
			}
			return triangleNum;
		}

		private long countDevisors(long NthTri, int devisors)
		{
			var count = 0;

			if (Dry.DryCode.IsPrime(NthTri)) return 0;
			if (NthTri == 1) return 1;															//the "Duh" exception

			for (int i = 1; count < devisors && i < (NthTri/2); i++)
				count += NthTri % i == 0 ? 1 : 0;											// if NthTrie devisible by i, then increment

			return count;																						// + 1 cause last number div its self
		}

		/// <summary>
		/// Formula to Aquire a Triangular number.
		/// </summary>
		/// <param name="nth">passing a number here will yield the corresponding triangular number.</param>
		/// <returns></returns>
		public long NthTriangularNumber(long nth)
		{
			return nth * (nth + 1) / 2;
		}
	}
}
